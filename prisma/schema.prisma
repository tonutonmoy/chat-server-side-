generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String
  email     String       @unique
  password  String
  role      UserRoleEnum @default(USER)
  status    UserStatus   @default(ACTIVE)
  profileImage String?
  otp       String?
  otpExpiry DateTime?

  isEmailVerified               Boolean   @default(true)
  emailVerificationToken        String?
  emailVerificationTokenExpires DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  senderNotification Notification[] @relation("notificationSender")
  reciverNotification Notification[] @relation("notificationReciver")
  senderMessages Message[] @relation("messageSender")
  reciverMessages Message[] @relation("messageReciver")

  // ðŸ‘‡ Relation: 1 user -> many messages


  @@map("users")

}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
 senderId   String @db.ObjectId
  reciverId    String @db.ObjectId
   sender User  @relation("messageSender",references: [id], fields: [senderId])
  reciver User  @relation("messageReciver",references: [id], fields: [reciverId])
  createdAt DateTime @default(now())

  @@map("messages")
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  senderId   String @db.ObjectId
  reciverId    String @db.ObjectId
   sender User  @relation("notificationSender",references: [id], fields: [senderId])
  reciver User  @relation("notificationReciver",references: [id], fields: [reciverId])

  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("notifications")
}


enum UserRoleEnum {
  USER
  SUPERADMIN
}

enum ProductStatus {
  ACTIVE
  INACTIVE
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}
