generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                      String         @id @default(auto()) @map("_id") @db.ObjectId
  firstName               String
  lastName                String
  email                   String         @unique
  password                String
  role                    UserRoleEnum   @default(USER)
  status                  UserStatus     @default(ACTIVE)
  profileImage            String?
  otp                     String?
  otpExpiry               DateTime?

  isEmailVerified         Boolean        @default(true)
  emailVerificationToken  String?
  emailVerificationTokenExpires DateTime?

  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  senderNotification      Notification[] @relation("notificationSender")
  reciverNotification     Notification[] @relation("notificationReciver")
  senderMessages          Message[]      @relation("messageSender")
  reciverMessages         Message[]      @relation("messageReciver")

  posts                   Post[]
  comments                Comment[]
  likes                   Like[]

  @@map("users")
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String?  // Made optional to allow messages with only files
  fileUrl   String?  // New: URL to the uploaded file (image, audio, video, document)
  fileType  String?  // New: MIME type of the uploaded file (e.g., "image/jpeg", "audio/webm")
  senderId  String   @db.ObjectId
  reciverId String   @db.ObjectId
  sender    User     @relation("messageSender", references: [id], fields: [senderId])
  reciver   User     @relation("messageReciver", references: [id], fields: [reciverId])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt // Added updatedAt for consistency and tracking changes

  @@map("messages")
}

model Notification {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  senderId    String   @db.ObjectId
  reciverId   String   @db.ObjectId
  sender      User     @relation("notificationSender", references: [id], fields: [senderId])
  reciver     User     @relation("notificationReciver", references: [id], fields: [reciverId])

  message     String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@map("notifications")
}

/// New Models Added Below
/// ---
model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  content   String?
  imageUrl  String[]  // For post images
  authorId  String    @db.ObjectId
  author    User      @relation(fields: [authorId], references: [id])
  comments  Comment[]
  likes     Like[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("posts")
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  authorId  String   @db.ObjectId
  author    User     @relation(fields: [authorId], references: [id])
  postId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade) // এখানে onDelete: Cascade যোগ করা হয়েছে
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  authorId  String   @db.ObjectId
  author    User     @relation(fields: [authorId], references: [id])
  postId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade) // এখানে onDelete: Cascade যোগ করা হয়েছে
  createdAt DateTime @default(now())

  @@unique([authorId, postId]) // A user can only like a post once
  @@map("likes")
}
/// ---

enum UserRoleEnum {
  USER
  SUPERADMIN
}

enum ProductStatus {
  ACTIVE
  INACTIVE
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}